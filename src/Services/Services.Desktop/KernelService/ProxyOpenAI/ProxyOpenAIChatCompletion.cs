// <auto-generated />

using Microsoft.SemanticKernel.AI.ChatCompletion;
using Microsoft.SemanticKernel.AI.TextCompletion;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.Net.Http;
using Microsoft.Extensions.Logging;

namespace FantasyCopilot.Services;

/// <summary>
/// OpenAI chat completion client.
/// </summary>
internal sealed class ProxyOpenAIChatCompletion : ProxyOpenAIClientBase, IChatCompletion, ITextCompletion
{
    /// <summary>
    /// Create an instance of the OpenAI chat completion connector
    /// </summary>
    /// <param name="modelId">Model name</param>
    /// <param name="apiKey">OpenAI API Key</param>
    /// <param name="organization">OpenAI Organization Id (usually optional)</param>
    /// <param name="httpClient">Custom <see cref="HttpClient"/> for HTTP requests.</param>
    /// <param name="logger">Application logger</param>
    public ProxyOpenAIChatCompletion(
        string modelId,
        string apiKey,
        string proxyEndpoint,
        string organization = null,
        HttpClient httpClient = null,
        ILogger logger = null
    ) : base(modelId, apiKey, proxyEndpoint, organization, httpClient, logger)
    {
    }

    /// <inheritdoc/>
    public Task<IReadOnlyList<IChatResult>> GetChatCompletionsAsync(
        ChatHistory chat,
        ChatRequestSettings requestSettings = null,
        CancellationToken cancellationToken = default)
    {
        return this.InternalGetChatResultsAsync(chat, requestSettings, cancellationToken);
    }

    /// <inheritdoc/>
    public IAsyncEnumerable<IChatStreamingResult> GetStreamingChatCompletionsAsync(
        ChatHistory chat,
        ChatRequestSettings requestSettings = null,
        CancellationToken cancellationToken = default)
    {
        return this.InternalGetChatStreamingResultsAsync(chat, requestSettings, cancellationToken);
    }

    /// <inheritdoc/>
    public ChatHistory CreateNewChat(string instructions = null)
    {
        return InternalCreateNewChat(instructions);
    }

    /// <inheritdoc/>
    public IAsyncEnumerable<ITextCompletionStreamingResult> GetStreamingCompletionsAsync(
        string text,
        CompleteRequestSettings requestSettings = null,
        CancellationToken cancellationToken = default)
    {
        return this.InternalGetChatStreamingResultsAsTextAsync(text, requestSettings, cancellationToken);
    }

    /// <inheritdoc/>
    public Task<IReadOnlyList<ITextCompletionResult>> GetCompletionsAsync(
        string text,
        CompleteRequestSettings requestSettings = null,
        CancellationToken cancellationToken = default)
    {
        return this.InternalGetChatResultsAsTextAsync(text, requestSettings, cancellationToken);
    }
}
