// <auto-generated/>

using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.SemanticKernel.AI.Embeddings;

namespace FantasyCopilot.Services;

/// <summary>
/// OpenAI text embedding service.
/// </summary>
internal sealed class ProxyOpenAITextEmbeddingGeneration : ProxyOpenAIClientBase, ITextEmbeddingGeneration
{
    /// <summary>
    /// Create an instance of the OpenAI text embedding connector
    /// </summary>
    /// <param name="modelId">Model name</param>
    /// <param name="apiKey">OpenAI API Key</param>
    /// <param name="organization">OpenAI Organization Id (usually optional)</param>
    /// <param name="httpClient">Custom <see cref="HttpClient"/> for HTTP requests.</param>
    /// <param name="logger">Application logger</param>
    public ProxyOpenAITextEmbeddingGeneration(
        string modelId,
        string apiKey,
        string proxyEndpoint,
        string organization = null,
        HttpClient httpClient = null,
        ILogger logger = null
    ) : base(modelId, apiKey, proxyEndpoint, organization, httpClient, logger)
    {
    }

    /// <summary>
    /// Generates an embedding from the given <paramref name="data"/>.
    /// </summary>
    /// <param name="data">List of strings to generate embeddings for</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <returns>List of embeddings</returns>
    public Task<IList<Embedding<float>>> GenerateEmbeddingsAsync(
        IList<string> data,
        CancellationToken cancellationToken = default)
    {
        return this.InternalGetEmbeddingsAsync(data, cancellationToken);
    }
}
