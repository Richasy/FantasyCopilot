// Copyright (c) Fantasy Copilot. All rights reserved.

using System;
using System.Text;
using System.Xml;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace FantasyCopilot.Libs.ResourceGenerator;

/// <summary>
/// During the compilation process,
/// retrieve text resource files and
/// automatically generate an enumeration.
/// </summary>
[Generator]
public class ResourceGenerator : IIncrementalGenerator
{
    /// <inheritdoc/>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // If it is necessary to debug the source code generator, please uncomment the following lines and re-build the project.
        // if (!Debugger.IsAttached) Debugger.Launch();
        var additionalFiles = context.AdditionalTextsProvider.Where(f => f.Path.EndsWith(".resw", StringComparison.OrdinalIgnoreCase));
        var contents = additionalFiles.Select((file, cancellationToken) => file.GetText(cancellationToken).ToString());
        context.RegisterSourceOutput(contents, (spc, content) =>
        {
            ProcessResourceFile(content, spc);
        });
    }

    private static void ProcessResourceFile(string content, SourceProductionContext context)
    {
        var xml = new XmlDocument();
        try
        {
            xml.LoadXml(content);
        }
        catch (Exception)
        {
            // Show the warning if no resource files are found
            var desc = new DiagnosticDescriptor(
                        "RESW0002",
                        "Failed to load .resw file",
                        "An error was encountered while trying to parse the resw file, please check the resw document structure.",
                        "Problem",
                        DiagnosticSeverity.Error,
                        true);

            context.ReportDiagnostic(Diagnostic.Create(desc, Location.None));
            return;
        }

        var sb = new StringBuilder();
        var dataNodes = xml.SelectNodes("//data");

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine();
        sb.AppendLine("namespace FantasyCopilot.Models.Constants;");
        sb.AppendLine();
        sb.AppendLine("public enum StringNames");
        sb.AppendLine("{");

        foreach (XmlNode dataNode in dataNodes)
        {
            var name = dataNode.Attributes["name"].Value;
            var value = dataNode.SelectSingleNode("value").InnerText;
            sb.AppendLine("    /// <summary>");
            sb.AppendLine($"    /// {value}");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine($"    {name},");
            sb.AppendLine();
        }

        sb.AppendLine("}");
        context.AddSource("StringNames.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }
}
