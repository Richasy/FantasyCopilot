// Copyright (c) Fantasy Copilot. All rights reserved.
// <auto-generated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using ColorCode;
using FantasyCopilot.Libs.Markdown.Markdown.Render;
using FantasyCopilot.Libs.Markdown.Renderers;
using Markdig;
using Microsoft.Toolkit.Parsers.Markdown;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Documents;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Media.Imaging;
using Windows.System;

namespace FantasyCopilot.Libs.Markdown
{
    /// <summary>
    /// An efficient and extensible control that can parse and render markdown.
    /// </summary>
    public partial class MarkdownTextBlock
    {
        /// <summary>
        /// Called when the render has a link we need to listen to.
        /// </summary>
        public void RegisterNewHyperLink(Hyperlink newHyperlink, string linkUrl)
        {
            // Setup a listener for clicks.
            newHyperlink.Click += Hyperlink_Click;

            // Associate the URL with the hyperlink.
            newHyperlink.SetValue(HyperlinkUrlProperty, linkUrl);

            // Add it to our list
            _listeningHyperlinks.Add(newHyperlink);
        }

        /// <summary>
        /// Called when the render has a link we need to listen to.
        /// </summary>
        public void RegisterNewHyperLink(Image newImageLink, string linkUrl, bool isHyperLink)
        {
            // Setup a listener for clicks.
            newImageLink.Tapped += NewImageLink_Tapped;

            // Associate the URL with the hyperlink.
            newImageLink.SetValue(HyperlinkUrlProperty, linkUrl);

            // Set if the Image is HyperLink or not
            newImageLink.SetValue(IsHyperlinkProperty, isHyperLink);

            // Add it to our list
            _listeningHyperlinks.Add(newImageLink);
        }

        /// <summary>
        /// Called when the renderer needs to display a image.
        /// </summary>
        /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
        public async Task<ImageSource> ResolveImageAsync(string url, string tooltip)
        {
            if (!Uri.TryCreate(url, UriKind.Absolute, out var uri))
            {
                if (!string.IsNullOrEmpty(UriPrefix))
                {
                    url = string.Format("{0}{1}", UriPrefix, url);
                }
            }

            var eventArgs = new ImageResolvingEventArgs(url, tooltip);
            ImageResolving?.Invoke(this, eventArgs);

            await eventArgs.WaitForDeferrals();

            try
            {
                return eventArgs.Handled
                    ? eventArgs.Image
                    : GetImageSource(new Uri(url));
            }
            catch (Exception)
            {
                return null;
            }

            static ImageSource GetImageSource(Uri imageUrl)
            {
                return Path.GetExtension(imageUrl.AbsolutePath)?.ToLowerInvariant() == ".svg"
                    ? new SvgImageSource(imageUrl)
                    : new BitmapImage(imageUrl);
            }
        }

        /// <summary>
        /// Called when a Code Block is being rendered.
        /// </summary>
        /// <returns>Parsing was handled Successfully.</returns>
        public bool ParseSyntax(InlineCollection inlineCollection, string text, string codeLanguage)
        {
            var eventArgs = new CodeBlockResolvingEventArgs(inlineCollection, text, codeLanguage);
            CodeBlockResolving?.Invoke(this, eventArgs);

            try
            {
                var result = eventArgs.Handled;
                if (UseSyntaxHighlighting && !result && codeLanguage != null)
                {
                    var language = Languages.FindById(codeLanguage);
                    if (language != null)
                    {
                        RichTextBlockFormatter formatter;
                        if (CodeStyling != null)
                        {
                            formatter = new RichTextBlockFormatter(CodeStyling);
                        }
                        else
                        {
                            var theme = _themeListener.CurrentTheme == ApplicationTheme.Dark ? ElementTheme.Dark : ElementTheme.Light;
                            if (RequestedTheme != ElementTheme.Default)
                            {
                                theme = RequestedTheme;
                            }

                            formatter = new RichTextBlockFormatter(theme);
                        }

                        formatter.FormatInlines(text, language, inlineCollection);
                        return true;
                    }
                }

                return result;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Called when a link needs to be handled.
        /// </summary>
        internal void LinkHandled(string url, bool isHyperlink)
        {
            // Links that are nested within superscript elements cause the Click event to fire multiple times.
            // e.g. this markdown "[^bot](http://www.reddit.com/r/youtubefactsbot/wiki/index)"
            // Therefore we detect and ignore multiple clicks.
            if (_multiClickDetectionTriggered)
            {
                return;
            }

            _multiClickDetectionTriggered = true;
            DispatcherQueue.TryEnqueue(() => _multiClickDetectionTriggered = false);

            // Get the hyperlink URL.
            if (url == null)
            {
                return;
            }

            // Fire off the event.
            var eventArgs = new LinkClickedEventArgs(url);
            if (isHyperlink)
            {
                LinkClicked?.Invoke(this, eventArgs);
            }
            else
            {
                ImageClicked?.Invoke(this, eventArgs);
            }
        }

        /// <summary>
        /// Called to preform a render of the current Markdown.
        /// </summary>
        private void RenderMarkdown()
        {
            // Leave if we don't have our root yet.
            if (_rootElement == null)
            {
                return;
            }

            // Disconnect from OnClick handlers.
            UnhookListeners();

            // Clear everything that exists.
            _listeningHyperlinks.Clear();

            var markdownRenderedArgs = new MarkdownRenderedEventArgs(null);

            // Make sure we have something to parse.
            if (string.IsNullOrWhiteSpace(Text))
            {
                _rootElement.Child = null;
            }
            else
            {
                try
                {
                    var context = new RendererContext();
                    context.Background = Background;
                    context.BorderBrush = BorderBrush;
                    context.BorderThickness = BorderThickness;
                    context.CharacterSpacing = CharacterSpacing;
                    context.FontFamily = FontFamily;
                    context.FontSize = FontSize;
                    context.FontStretch = FontStretch;
                    context.FontStyle = FontStyle;
                    context.FontWeight = FontWeight;
                    context.Foreground = Foreground;
                    context.IsTextSelectionEnabled = IsTextSelectionEnabled;
                    context.Padding = Padding;
                    context.CodeBackground = CodeBackground;
                    context.CodeBorderBrush = CodeBorderBrush;
                    context.CodeBorderThickness = CodeBorderThickness;
                    context.InlineCodeBorderThickness = InlineCodeBorderThickness;
                    context.InlineCodeBackground = InlineCodeBackground;
                    context.InlineCodeBorderBrush = InlineCodeBorderBrush;
                    context.InlineCodePadding = InlineCodePadding;
                    context.InlineCodeFontFamily = InlineCodeFontFamily;
                    context.InlineCodeForeground = InlineCodeForeground;
                    context.CodeForeground = CodeForeground;
                    context.CodeFontFamily = CodeFontFamily;
                    context.CodePadding = CodePadding;
                    context.CodeMargin = CodeMargin;
                    context.EmojiFontFamily = EmojiFontFamily;
                    context.Header1FontSize = Header1FontSize;
                    context.Header1FontWeight = Header1FontWeight;
                    context.Header1Margin = Header1Margin;
                    context.Header1Foreground = Header1Foreground;
                    context.Header2FontSize = Header2FontSize;
                    context.Header2FontWeight = Header2FontWeight;
                    context.Header2Margin = Header2Margin;
                    context.Header2Foreground = Header2Foreground;
                    context.Header3FontSize = Header3FontSize;
                    context.Header3FontWeight = Header3FontWeight;
                    context.Header3Margin = Header3Margin;
                    context.Header3Foreground = Header3Foreground;
                    context.Header4FontSize = Header4FontSize;
                    context.Header4FontWeight = Header4FontWeight;
                    context.Header4Margin = Header4Margin;
                    context.Header4Foreground = Header4Foreground;
                    context.Header5FontSize = Header5FontSize;
                    context.Header5FontWeight = Header5FontWeight;
                    context.Header5Margin = Header5Margin;
                    context.Header5Foreground = Header5Foreground;
                    context.Header6FontSize = Header6FontSize;
                    context.Header6FontWeight = Header6FontWeight;
                    context.Header6Margin = Header6Margin;
                    context.Header6Foreground = Header6Foreground;
                    context.HorizontalRuleBrush = HorizontalRuleBrush;
                    context.HorizontalRuleMargin = HorizontalRuleMargin;
                    context.HorizontalRuleThickness = HorizontalRuleThickness;
                    context.ListMargin = ListMargin;
                    context.ListGutterWidth = ListGutterWidth;
                    context.ListBulletSpacing = ListBulletSpacing;
                    context.ParagraphMargin = ParagraphMargin;
                    context.ParagraphLineHeight = ParagraphLineHeight;
                    context.QuoteBackground = QuoteBackground;
                    context.QuoteBorderBrush = QuoteBorderBrush;
                    context.QuoteBorderThickness = QuoteBorderThickness;
                    context.QuoteForeground = QuoteForeground;
                    context.QuoteMargin = QuoteMargin;
                    context.QuotePadding = QuotePadding;
                    context.TableBorderBrush = TableBorderBrush;
                    context.TableBorderThickness = TableBorderThickness;
                    context.TableCellPadding = TableCellPadding;
                    context.TableMargin = TableMargin;
                    context.TextWrapping = TextWrapping;
                    context.LinkForeground = LinkForeground;
                    context.ImageStretch = ImageStretch;
                    context.ImageMaxHeight = ImageMaxHeight;
                    context.ImageMaxWidth = ImageMaxWidth;
                    context.WrapCodeBlock = WrapCodeBlock;
                    context.FlowDirection = FlowDirection;

                    var pipeline = new MarkdownPipelineBuilder().Build();
                    var renderer = new WinUIRenderer();
                    renderer.Context = context;
                    pipeline.Setup(renderer);
                    var doc = Markdig.Markdown.Parse(Text, pipeline);
                    _rootElement.Child = renderer.Render(doc) as UIElement;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Error while parsing and rendering: " + ex.Message);
                    if (Debugger.IsAttached)
                    {
                        Debugger.Break();
                    }

                    markdownRenderedArgs = new MarkdownRenderedEventArgs(ex);
                }
            }

            // Indicate that the parse is done.
            MarkdownRendered?.Invoke(this, markdownRenderedArgs);
        }

        private void HookListeners()
        {
            // Re-hook all hyper link events we currently have
            foreach (var link in _listeningHyperlinks)
            {
                if (link is Hyperlink hyperlink)
                {
                    hyperlink.Click -= Hyperlink_Click;
                    hyperlink.Click += Hyperlink_Click;
                }
                else if (link is Image image)
                {
                    image.Tapped -= NewImageLink_Tapped;
                    image.Tapped += NewImageLink_Tapped;
                }
            }
        }

        private void UnhookListeners()
        {
            // Unhook any hyper link events if we have any
            foreach (var link in _listeningHyperlinks)
            {
                if (link is Hyperlink hyperlink)
                {
                    hyperlink.Click -= Hyperlink_Click;
                }
                else if (link is Image image)
                {
                    image.Tapped -= NewImageLink_Tapped;
                }
            }
        }
    }
}
