# Build MSIX package, sign with self-signed certificate, and upload to GitHub action artifacts.
# You can download the MSIX package from artifacts and install it via sideloading.

name: Build MSIX package

on:
  workflow_dispatch:
    inputs:
      version: 
        description: 'Version number'
        required: true
        default: '0.0.0.0'

jobs:
  build:
    needs: create-draft-release
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]

    env:
      SOLUTION_NAME: FantasyCopilot.sln
      PACKAGE_PROJECT_NAME: App
      CERT_FILE_NAME: FantasyCopilot.App_TemporaryKey.pfx

    defaults:
      run:
        working-directory: ./src

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Restore dependencies
      run: dotnet restore $env:SOLUTION_NAME

    - uses: release-drafter/release-drafter@v5
      name: Create release draft
      id: release-drafter

    - name: Build solution
      run: |
        msbuild $env:SOLUTION_NAME `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform=${{ matrix.platform }}

    - name: Get MSIX package output directory
      run: |
        $msixPackageDir = "${{ github.workspace }}\Packages\${{ matrix.platform }}\"
        "MSIX_PACKAGE_DIR=$msixPackageDir" >> $env:GITHUB_ENV

    - name: ðŸ“¦ Build and sign MSIX package
      run: |
        msbuild $env:PACKAGE_PROJECT_NAME `
          /p:Configuration=${{ matrix.configuration }} `
          /p:Platform=${{ matrix.platform }} `
          /p:RuntimeIdentifier=win10-${{ matrix.platform }} `
          `
          /p:GenerateAppxPackageOnBuild=true `
          /p:AppxPackageDir="$env:MSIX_PACKAGE_DIR" `
          /p:AppxBundle=Never `
          /p:UapAppxPackageBuildMode=SideloadOnly `
          `
          /p:AppxPackageSigningEnabled=True `
          /p:PackageCertificateKeyFile=$env:CERT_FILE_NAME `
          /p:AppxPackageSigningTimestampDigestAlgorithm=SHA256 `
          `
          /p:SelfContained=true `
          /p:PublishReadyToRun=false

        # Remove framework packages not of current platform to reduce artifact size
        Get-ChildItem "$env:MSIX_PACKAGE_DIR\*\Dependencies\*" `
          | Where-Object -Property Name -NE ${{ matrix.platform }} `
          | ForEach-Object { Remove-Item -Recurse $_ }

    - name: Get GitHub action artifact name
      run: |
        $folderName = (Get-ChildItem $env:MSIX_PACKAGE_DIR)[0].Name
        $shortHash = $env:GITHUB_SHA.Substring(0, 7)
        $artifactName = "$folderName-$shortHash"
        "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

    - name: ðŸš€ Upload MSIX package to GitHub action artifact
      uses: actions/upload-artifact@v3
      with:
        name:  ${{ env.ARTIFACT_NAME }}
        path: ${{ env.MSIX_PACKAGE_DIR }}